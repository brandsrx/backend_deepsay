generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  slug        String    @unique @db.VarChar(50)
  description String
  color       String?   @default("#6366f1") @db.Char(7)
  icon        String?   @db.VarChar(50)
  is_active   Boolean?  @default(true)
  post_count  Int?      @default(0)
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  posts       posts[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model comments {
  id              String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id         String      @db.Uuid
  user_id         String      @db.Uuid
  parent_id       String?     @db.Uuid
  content         String
  thread_path     String?
  depth           Int?        @default(0)
  root_comment_id String?     @db.Uuid
  like_count      Int?        @default(0)
  dislike_count   Int?        @default(0)
  reply_count     Int?        @default(0)
  created_at      DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?   @default(now()) @db.Timestamptz(6)
  comments        comments?   @relation("commentsTocomments", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_comments  comments[]  @relation("commentsTocomments")
  posts           posts       @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reactions       reactions[]

  @@index([post_id, created_at], map: "idx_comments_post_created")
  @@index([thread_path], map: "idx_comments_thread")
  @@index([user_id, created_at(sort: Desc)], map: "idx_comments_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model follows {
  id                                String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  follower_id                       String    @db.Uuid
  following_id                      String    @db.Uuid
  created_at                        DateTime? @default(now()) @db.Timestamptz(6)
  users_follows_follower_idTousers  users     @relation("follows_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_follows_following_idTousers users     @relation("follows_following_idTousers", fields: [following_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([follower_id, following_id], map: "follows_unique")
  @@index([follower_id, created_at(sort: Desc)], map: "idx_follows_follower")
  @@index([following_id, created_at(sort: Desc)], map: "idx_follows_following")
}

model notifications {
  id                                      String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  recipient_id                            String            @db.Uuid
  sender_id                               String?           @db.Uuid
  type                                    notification_type
  title                                   String            @db.VarChar(200)
  message                                 String?
  data                                    Json?             @default("{}")
  reference_id                            String?           @db.Uuid
  reference_type                          String?           @db.VarChar(20)
  is_read                                 Boolean?          @default(false)
  is_email_sent                           Boolean?          @default(false)
  created_at                              DateTime?         @default(now()) @db.Timestamptz(6)
  read_at                                 DateTime?         @db.Timestamptz(6)
  users_notifications_recipient_idTousers users             @relation("notifications_recipient_idTousers", fields: [recipient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_notifications_sender_idTousers    users?            @relation("notifications_sender_idTousers", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([type, created_at(sort: Desc)], map: "idx_notifications_type")
}

model post_tags {
  post_id         String    @db.Uuid
  tag_id          Int
  relevance_score Decimal?  @default(1.0) @db.Decimal(5, 2)
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  posts           posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags            tags      @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, tag_id])
  @@index([tag_id], map: "idx_post_tags_tag")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model post_views {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  post_id     String    @db.Uuid
  user_id     String?   @db.Uuid
  ip_address  String?   @db.Inet
  user_agent  String?
  viewed_at   DateTime? @default(now()) @db.Timestamp(6)
  viewed_date DateTime? @default(dbgenerated("(viewed_at)::date")) @db.Date
  posts       posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@unique([post_id, user_id, viewed_date], map: "unique_user_post_view")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model posts {
  id                   String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                String        @db.VarChar(300)
  content              String
  excerpt              String?
  slug                 String        @unique(map: "posts_slug_unique") @db.VarChar(350)
  user_id              String?       @db.Uuid
  category_id          Int
  is_anonymous         Boolean?      @default(false)
  allow_comments       Boolean?      @default(true)
  is_featured          Boolean?      @default(false)
  is_pinned            Boolean?      @default(false)
  status               post_status?  @default(published)
  featured_image_url   String[]      @default([])
  reading_time_minutes Int?
  view_count           Int?          @default(0)
  unique_view_count    Int?          @default(0)
  like_count           Int?          @default(0)
  dislike_count        Int?          @default(0)
  love_count           Int?          @default(0)
  laugh_count          Int?          @default(0)
  angry_count          Int?          @default(0)
  comment_count        Int?          @default(0)
  share_count          Int?          @default(0)
  published_at         DateTime?     @db.Timestamptz(6)
  created_at           DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?     @default(now()) @db.Timestamptz(6)
  comments             comments[]
  post_tags            post_tags[]
  post_views           post_views[]
  categories           categories    @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  users                users?        @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  reactions            reactions[]
  saved_posts          saved_posts[]

  @@index([category_id, published_at(sort: Desc)], map: "idx_posts_category")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reactions {
  id         String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String        @db.Uuid
  post_id    String?       @db.Uuid
  comment_id String?       @db.Uuid
  type       reaction_type
  created_at DateTime?     @default(now()) @db.Timestamptz(6)
  comments   comments?     @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts      posts?        @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, post_id, comment_id], map: "reactions_unique")
  @@index([user_id, created_at(sort: Desc)], map: "idx_reactions_user")
}

model saved_posts {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id         String    @db.Uuid
  post_id         String    @db.Uuid
  sort_order      Int?      @default(0)
  collection_name String?   @default("default") @db.VarChar(50)
  saved_at        DateTime? @default(now()) @db.Timestamptz(6)
  posts           posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, post_id], map: "saved_posts_unique")
}

model tags {
  id          Int         @id @default(autoincrement())
  name        String      @unique @db.VarChar(30)
  slug        String      @unique @db.VarChar(30)
  usage_count Int?        @default(0)
  created_at  DateTime?   @default(now()) @db.Timestamptz(6)
  post_tags   post_tags[]

  @@index([usage_count(sort: Desc)], map: "idx_tags_usage")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  id                                              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username                                        String          @unique @db.VarChar(30)
  email                                           String          @unique @db.VarChar(254)
  name                                            String          @db.VarChar(100)
  bio                                             String?         @default("")
  password_hash                                   String          @db.Char(60)
  role                                            user_role?      @default(user)
  avatar_url                                      String?
  cover_url                                       String?
  location                                        String?         @db.VarChar(100)
  website                                         String?         @db.VarChar(200)
  is_active                                       Boolean?        @default(true)
  is_private                                      Boolean?        @default(false)
  is_verified                                     Boolean?        @default(false)
  email_verified                                  Boolean?        @default(false)
  notify_comments                                 Boolean?        @default(true)
  notify_likes                                    Boolean?        @default(true)
  notify_follows                                  Boolean?        @default(true)
  follower_count                                  Int?            @default(0)
  following_count                                 Int?            @default(0)
  post_count                                      Int?            @default(0)
  total_likes_received                            Int?            @default(0)
  created_at                                      DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at                                      DateTime?       @default(now()) @db.Timestamptz(6)
  last_active                                     DateTime?       @default(now()) @db.Timestamptz(6)
  comments                                        comments[]
  follows_follows_follower_idTousers              follows[]       @relation("follows_follower_idTousers")
  follows_follows_following_idTousers             follows[]       @relation("follows_following_idTousers")
  notifications_notifications_recipient_idTousers notifications[] @relation("notifications_recipient_idTousers")
  notifications_notifications_sender_idTousers    notifications[] @relation("notifications_sender_idTousers")
  post_views                                      post_views[]
  posts                                           posts[]
  reactions                                       reactions[]
  saved_posts                                     saved_posts[]

  @@index([created_at(sort: Desc)], map: "idx_users_created")
  @@index([email], map: "idx_users_email")
  @@index([username], map: "idx_users_username")
}

enum notification_type {
  like
  comment
  follow
  mention
  post
}

enum post_status {
  draft
  published
  archived
  deleted
}

enum reaction_type {
  like
  dislike
  love
  laugh
  angry
}

enum user_role {
  user
  moderator
  admin
}
